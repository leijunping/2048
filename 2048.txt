2048游戏开发总结：
首先在网上下载了2048游戏的部分源代码，深深感悟别人真的很厉害，语法简洁明了，仔细分析之后感觉这个游戏不是很复杂，所以动了自己试一试的念头，但是中间隔了挺长时间。
2014年9月4日：上午花了半天时间认真分析了别人的源代码，每个步奏，每个函数，什么时候调用，一步步分析整个过程。总结了大致思路，并画出了简图；
下午，根据上午的分析，一步步写函数完成整个函数的基本过程，但是存在一些bug。包括别人的源代码。
源代码存在的问题：1.在开始面板里面点击键盘事件会报错，game尚未建立，同样在游戏结束时继续点击键盘四个键也会报错；
              原因在于：键盘事件在我移动相应的四个简单的时候就已经建立了，所以不断移动会不断触发，即使游戏其实尚未开始。
              解决方案：把键盘事件定义在点击鼠标时间之内；
           
            2.当向某个方向移动到满格时，在此方向上不能合并，但是在其他方向上是可以的game is not over，继续移动也会报错；
             原因在于：此时游戏正在进行之中，键盘事件一直处于触发状态；
             解决方法：最终原因是没点击一次上下左右键就会新建一个tile，而此时已经没有多余的空间存放tile了。if（空的格子的数量！=0的时候）通过设置限定条件在新建tile。
            3，最大的缺陷是，向某个方向移动，即使不能再继续合并，每移动一次还是会产生一个新的tile，这是希望看到的。
            解决方法：这个问题我弄了一天，但是到之后才发现其实很简单的。tile的创建只需要在每次会有真正的合并存在的时候，因此只需要设置一个flag值就行了。这点一定要注意，
                              才开始因为没想到，所以搞得方法特别复杂。
          才开始复杂的方法：感觉可以通过计算tile的数量和合并之后的tile数量相比，两者不相同则就表明发生了合并，就新建一个tile，这是就应该想到用flag，有点感觉，但是当时实在是想不起来。继续比较格子。。。
          并且在在和并过程之后比较，即使条件成立也不会产生新tile，改变方向也不行。比较的次序不对，其实应在在合并之前比较看结果是否符合条件，符合才创建。所以这就打算移到合并之前比较。
   根据种种可能情况找出规律，写出比较条件，但是要分为两种情况产生新tile，但是又不能同时存在。思前想后，我何不在这里这一个flag呢，至此，前面的那个念头也豁然开朗。
   最后两种方法都收到了效果。哎。。累死我啦这一天，准备继续升级。。。。。
